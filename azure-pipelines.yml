trigger:
  branches:
    include:
      - main  # Trigger pipeline on main branch

variables:
  azureContainerRegistry: 'letestregistry.azurecr.io'  # Azure Container Registry (ACR) name with domain
  imageName: 'node-app'  # Docker image name
  kubernetesCluster: 'new-aks-cluster'  # AKS Cluster name
  kubernetesNamespace: 'default'  # Kubernetes namespace
  resourceGroup: 'newton-resources'  # Azure Resource Group
  terraformDirectory: 'terraform/'  # Directory for Terraform scripts
  AZURE_SUBSCRIPTION_CONNECTION: 'd49e6059-7e63-4b1d-b093-492b8a94c5cb'  # Azure Subscription Service Connection
  dockerRegistryConnection: 'letestregistry'  # ACR service connection name
  githubRepo: 'https://github.com/DnT-Nutan/Terraform_Pipeline.git'  # GitHub repository URL

stages:
- stage: ProvisionInfrastructure
  displayName: 'Provision Azure Infrastructure'
  jobs:
  - job: Provision
    displayName: 'Provision Azure Resources with Terraform'
    pool: laptops

    steps:
    # Install Terraform
    - script: |
        curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add - && \
        sudo apt-add-repository "deb https://apt.releases.hashicorp.com $(lsb_release -cs) main" && \
        sudo apt-get update && sudo apt-get install terraform
      displayName: 'Install Terraform'

    # Checkout the latest code from GitHub
    - task: Checkout@1
      displayName: 'Checkout GitHub Repo'

    # Fetch the latest Terraform state file from GitHub (if needed)
    - script: |
        echo "Fetching the latest terraform.tfstate..."
        git pull origin main  
      displayName: 'Get Latest Terraform State File'

    # Initialize Terraform
    - script: |
        echo "Initializing Terraform..."
        cd $(terraformDirectory) && terraform init
      displayName: 'Initialize Terraform'

    # Run Terraform Plan to preview the changes
    - script: |
        echo "Running Terraform plan..."
        cd $(terraformDirectory) && terraform plan -var="image_name=$(imageName)" -var="resource_group=$(resourceGroup)"
      displayName: 'Terraform Plan'

    # Apply Terraform configuration to provision resources
    - script: |
        echo "Applying Terraform configurations..."
        cd $(terraformDirectory) && terraform apply -auto-approve -var="image_name=$(imageName)" -var="resource_group=$(resourceGroup)"
      displayName: 'Apply Terraform'

- stage: BuildAndPushDockerImage
  displayName: 'Build and Push Docker Image'
  dependsOn: ProvisionInfrastructure
  jobs:
  - job: BuildAndPush
    displayName: 'Build and Push Docker Image to ACR'
    pool: laptops

    steps:
    # Checkout the latest code from GitHub
    - task: Checkout@1
      displayName: 'Checkout GitHub Repo'

    # Build Docker image and push it to Azure Container Registry
    - task: Docker@2
      displayName: 'Build Docker Image'
      inputs:
        command: 'build'
        containerRegistry: 'az-pipeline-connec'  # Ensure this is the correct service connection for your ACR
        repository: '$(azureContainerRegistry)/$(imageName)'  # Docker repository path
        dockerfile: '$(Build.SourcesDirectory)/Dockerfile'  # Path to Dockerfile
        tags: '$(Build.BuildId)'  # Use Build ID as tag

    - task: Docker@2
      displayName: 'Push Docker Image to ACR'
      inputs:
        command: 'push'
        containerRegistry: 'az-pipeline-connec'  # Ensure this is the correct service connection for your ACR
        repository: '$(azureContainerRegistry)/$(imageName)'  # Docker repository path
        tags: '$(Build.BuildId)'  # Push image with Build ID tag

- stage: DeployToAKS
  displayName: 'Deploy to AKS'
  dependsOn: BuildAndPushDockerImage
  jobs:
  - job: Deploy
    displayName: 'Deploy to AKS Cluster'
    pool: laptops

    steps:
    # Azure CLI task to login and deploy to AKS
    - task: AzureCLI@2
      displayName: "Azure CLI Login and AKS Deployment"
      inputs:
        azureSubscription: 'Azure-Cloud-Account-DNT'  # Replace with your Azure service connection reference
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Setting up kubectl to access AKS..."
          az aks get-credentials --resource-group $(resourceGroup) --name $(kubernetesCluster)
          kubectl apply -f $(Build.SourcesDirectory)/deploy.yaml
          kubectl apply -f $(Build.SourcesDirectory)/service.yaml
