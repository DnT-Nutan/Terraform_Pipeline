trigger:
  branches:
    include:
      - main

variables:
  azureContainerRegistry: 'letestregistry.azurecr.io'
  imageName: 'node-app'
  kubernetesCluster: 'new-aks-cluster'
  kubernetesNamespace: 'default'
  resourceGroup: 'newton-resources'
  terraformDirectory: 'terraform/'
  AZURE_SUBSCRIPTION_CONNECTION: 'Azure-Cloud-Account-DNT'
  dockerRegistryConnection: 'letestregistry'
  githubRepo: 'https://github.com/DnT-Nutan/Terraform_Pipeline.git'

stages:
- stage: ProvisionInfrastructure
  jobs:
  - job: Provision
    displayName: 'Provision Azure Resources with Terraform'
    pool: laptops

    steps:
    # Install Terraform
    - script: |
        curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add - && \
        sudo apt-add-repository "deb https://apt.releases.hashicorp.com $(lsb_release -cs) main" && \
        sudo apt-get update && sudo apt-get install terraform
        terraform version
      displayName: 'Install Terraform'

    # Checkout the repository from GitHub
    - task: Checkout@1
      displayName: 'Checkout GitHub Repository'

    # Initialize Terraform
    - script: |
        echo "Initializing Terraform..."
        cd $(terraformDirectory) && terraform init
      displayName: 'Terraform Init'

    # Run Terraform Plan
    - script: |
        echo "Running Terraform Plan..."
        cd $(terraformDirectory) && terraform plan -var="image_name=$(imageName)" -var="resource_group=$(resourceGroup)"
      displayName: 'Terraform Plan'

    # Apply Terraform Plan
    - script: |
        echo "Applying Terraform Plan..."
        cd $(terraformDirectory) && terraform apply -auto-approve -var="image_name=$(imageName)" -var="resource_group=$(resourceGroup)"
      displayName: 'Apply Terraform'

- stage: BuildAndPushDockerImage
  dependsOn: ProvisionInfrastructure
  jobs:
  - job: BuildAndPush
    displayName: 'Build and Push Docker Image to ACR'
    pool: laptops

    steps:
    # Checkout the repository from GitHub
    - task: Checkout@1
      displayName: 'Checkout GitHub Repository'

    # Build Docker image and push to Azure Container Registry
    - task: Docker@2
      displayName: 'Build Docker Image'
      inputs:
        command: 'build'
        containerRegistry: 'az-pipeline-connec'
        repository: '$(azureContainerRegistry)/$(imageName)'
        dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        tags: '$(Build.BuildId)'

    - task: Docker@2
      displayName: 'Push Docker Image to ACR'
      inputs:
        command: 'push'
        containerRegistry: 'az-pipeline-connec'
        repository: '$(azureContainerRegistry)/$(imageName)'
        tags: '$(Build.BuildId)'

- stage: DeployToAKS
  dependsOn: BuildAndPushDockerImage
  jobs:
  - job: Deploy
    displayName: 'Deploy Docker Image to AKS'
    pool: laptops

    steps:
    # Azure CLI task for logging in to Azure
    - task: AzureCLI@2
      displayName: 'Azure Login and Deploy'
      inputs:
        azureSubscription: 'Azure-Cloud-Account-DNT'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Setting up kubectl to access AKS..."
          az aks get-credentials --resource-group $(resourceGroup) --name $(kubernetesCluster)
          
          # Apply Kubernetes manifests
          echo "Deploying application to AKS..."
          kubectl apply -f $(Build.SourcesDirectory)/deploy.yaml
          kubectl apply -f $(Build.SourcesDirectory)/service.yaml
